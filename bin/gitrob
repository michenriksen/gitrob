#!/usr/bin/env ruby
# coding: utf-8

require 'gitrob'

class App
  include Methadone::Main

  leak_exceptions true

  main do
    Thread.abort_on_exception = true
    Paint.mode = 0 if options.include?('no-color')

    puts Paint[Gitrob::banner, :bright, :blue] unless options.include?('no-banner')
    Gitrob::status("Starting Gitrob version #{Gitrob::VERSION} at #{Time.now.strftime("%Y-%m-%d %I:%S %Z")}")

    if !Gitrob::agreement_accepted?
      puts Gitrob::agreement
      print Paint["\n\nDo you agree to the terms of use? [y/n]: ", :bright, :green]
      choice = $stdin.gets.chomp
      if %w{y yes}.include?(choice)
        Gitrob::agreement_accepted
      else
        Gitrob::fatal("Exiting Gitrob.")
      end
    end

    if !Gitrob::configured? || options.include?('configure')
      Gitrob::status("Starting Gitrob configuration wizard\n\n")

      hostname   = ask("#{Paint[" Enter PostgreSQL hostname:", :bright, :white]} ") { |q| q.default = "localhost" }
      port       = ask("#{Paint[" Enter PostgreSQL port:", :bright, :white]} ", Integer) { |q| q.default = 5432; q.in = 1..65535 }
      username   = ask("#{Paint[" Enter PostgreSQL username:", :bright, :white]} ")
      password   = ask("#{Paint[" Enter PostgreSQL password for #{username} (masked):", :bright, :white]} ") { |q| q.echo = 'x' }
      database   = ask("#{Paint[" Enter PostgreSQL database name:", :bright, :white]} ") { |q| q.default = 'gitrob' }
      smtp_server = ask("#{Paint[" Enter SMTP server for email updates (blank for no email updates):", :bright, :white]} ")

      update_emails = Array.new
      if smtp_server != ''
        smtp_port = ask("#{Paint[" Enter SMTP port:", :bright, :white]} ")

        while update_emails.uniq.empty?
          update_emails = ask(Paint[" Enter emails to receive updates (blank line to stop):", :bright, :white]) do |q|
            q.gather = ""
          end
        end
      end

      access_tokens = Array.new
      while access_tokens.uniq.empty?
        access_tokens = ask(Paint[" Enter GitHub access tokens (blank line to stop):", :bright, :white],
                          lambda { |ans| ans =~ /[a-f0-9]{40}/ ? ans : nil } ) do |q|
          q.gather = ""
        end
      end

      config = {
        'sql_connection_uri'   => "postgres://#{username}:#{password}@#{hostname}:#{port}/#{database}",
        'github_access_tokens' => access_tokens.uniq,
        'smtp_server'          => smtp_server,
        'smtp_port'            => smtp_port,
        'update_emails'        => update_emails.uniq
      }

      Gitrob::task("Saving configuration to file...") do
        Gitrob::save_configuration!(config)
      end

      exit unless options['organization']
    end

    Gitrob::task("Loading configuration...") do
      Gitrob::load_configuration!
    end

    Gitrob::task("Preparing SQL database...") do
      Gitrob::prepare_database!
    end

    if options['reset-db']
      Gitrob::task("Resetting database tables...") do
        DataMapper::auto_migrate!
      end
      exit
    end

    if options['delete']
      Gitrob::delete_organization(options['delete'])
      exit
    end

    if options['start-server']
      Gitrob::status("Starting web application on http://#{options['bind-address']}:#{options['port']}/...")
      puts "\n\n"
      Gitrob::WebApp.run!(:port => options['port'].to_i, :bind => options['bind-address'])
      exit
    end

    if options['update']
      Gitrob::scan_org(options['organization'], options['threads'].to_i, 'update', options['update'])
      exit
    end

    Gitrob::scan_org(options['organization'], options['threads'].to_i, 'new')

    if !options.include?('no-server')
      Gitrob::status("Starting web application on port #{options['port']}...")
      Gitrob::status("Browse to http://#{options['bind-address']}:#{options['port']}/ to see results!")
      puts "\n\n"
      Gitrob::WebApp.run!(:port => options[:port].to_i, :bind => options['bind-address'])
      exit
    end
  end

  version Gitrob::VERSION
  description "Reconnaissance tool for GitHub organizations."

  options['bind-address'] = '0.0.0.0'
  options['port']         = 9393
  options['threads']      = 3

  on('-o', '--organization NAME', "Name of GitHub organization")
  on('-x', '--test', "Send Test Email")
  on('-u', '--update ORG_ID', "Organization ID to be updated")
  on('-s', '--start-server', "Start web server, don't run any checks")
  on('-p', '--port PORT', "Port to bind web server to")
  on('-b', '--bind-address ADDRESS', "Address to bind web server to")
  on('-t', '--threads THREADS', "Number of threads to use")
  on('--delete NAME', "Delete an organization in the database")
  on('--reset-db', "Resets the database")
  on('--configure', "Start configuration wizard")
  on('--no-server', "Don't start the server when finished")
  on('--no-color', "Don't colorize output")
  on('--no-banner', "Don't print Gitrob banner")

  begin
    if ARGV.empty?
      Gitrob::fatal("No options given; see gitrob --help for options.")
    end

    go!
  rescue Gitrob::Github::HttpClient::MissingAccessTokensError
    Gitrob::fatal("Configuration file does not contain any GitHub access tokens. Run Gitrob with --configure flag to set it up.")
  rescue Gitrob::Github::HttpClient::AccessTokensDepletedError
    Gitrob::fatal("All GitHub access tokens under rate limiting. Go have a cup of coffee and try again.")
  rescue Gitrob::Github::HttpClient::RequestError => e
    Gitrob::fatal("A request to the GitHub API failed: #{e.message}")
  rescue Interrupt
    print "\b\b\n"; # Remove ^C from screen
    Gitrob::fatal("Caught interrupt; exiting.")
  rescue => e
    Gitrob::fatal("An error occurred: #{e.class.name}: #{e.message}")
  end
end
